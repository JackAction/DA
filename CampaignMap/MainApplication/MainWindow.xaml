<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MainApplication"
        xmlns:ZoomAndPan="clr-namespace:ZoomAndPan;assembly=ZoomAndPan"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" x:Class="MainApplication.MainWindow"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:i2="http://schemas.microsoft.com/expression/2010/interactions"
        mc:Ignorable="d"
        Title="DnD Campaign Map" Height="800" Width="1200"
        Loaded="MainWindow_Loaded" Icon="favicon.ico"
        >

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="CampaignMapResourceDictionary.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <!--#region ZoomAndPan Framework -->

            <!-- UI commands. -->
            <RoutedUICommand x:Key="Commands.ZoomOut" />
            <RoutedUICommand x:Key="Commands.ZoomIn" />
            <RoutedUICommand x:Key="Commands.JumpBackToPrevZoom" />
            <RoutedUICommand x:Key="Commands.Fill" />
            <RoutedUICommand x:Key="Commands.OneHundredPercent" />

            <!-- 
            This converts from a scale value to a percentage value.
            It is used to convert the value of 'ContentScale' to the percentage zoom level that is displayed in the UI.
            -->
            <local:ScaleToPercentConverter x:Key="scaleToPercentConverter" />

            <!--#endregion-->

            <!--#region Storyboards für Flyout Windows -->

            <Storyboard x:Key="sbShowLeftMenu" >
                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="0,0,0,0" SpeedRatio="8" DecelerationRatio="1" Duration="0:0:1" />
            </Storyboard>
            <Storyboard x:Key="sbHideLeftMenu">
                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="-250,0,0,0" SpeedRatio="8" AccelerationRatio="1" Duration="0:0:1" />
            </Storyboard>


            <Storyboard x:Key="sbShowTopMenu" >
                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="0,0,0,0" SpeedRatio="8" DecelerationRatio="1" Duration="0:0:1" />
            </Storyboard>
            <Storyboard x:Key="sbHideTopMenu">
                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="0,-100,0,0" SpeedRatio="8" AccelerationRatio="1" Duration="0:0:1" />
            </Storyboard>


            <Storyboard x:Key="sbShowRightMenu" >
                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="0,0,20,0" SpeedRatio="8" DecelerationRatio="1" Duration="0:0:1" />
            </Storyboard>
            <Storyboard x:Key="sbHideRightMenu">
                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="0,0,-320,0" SpeedRatio="8" AccelerationRatio="1" Duration="0:0:1" />
            </Storyboard>


            <Storyboard x:Key="sbShowBottomMenu" >
                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="0,0,0,0" SpeedRatio="8" DecelerationRatio="1" Duration="0:0:1" />
            </Storyboard>
            <Storyboard x:Key="sbHideBottomMenu">
                <ThicknessAnimation Storyboard.TargetProperty="Margin" To="0,0,0,-100" SpeedRatio="8" AccelerationRatio="1" Duration="0:0:1" />
            </Storyboard>

            <!--#endregion-->

        </ResourceDictionary>
    </Window.Resources>

    <Window.InputBindings>

        <!--
        Bind keys to commands.
        -->
        <KeyBinding
			Key="Minus"
			Command="{StaticResource Commands.ZoomOut}"
			/>
        <KeyBinding
			Key="Plus"
			Command="{StaticResource Commands.ZoomIn}"
			/>
        <KeyBinding
			Key="Backspace"
			Command="{StaticResource Commands.JumpBackToPrevZoom}"
			/>
        <KeyBinding
			Gesture="CTRL+P"
			Command="{Binding MapElementInputMode}"
            CommandParameter="POI"
			/>
        <KeyBinding
			Gesture="CTRL+T"
			Command="{Binding MapElementInputMode}"
            CommandParameter="Select"
			/>
        <KeyBinding
			Gesture="CTRL+R"
			Command="{Binding MapElementInputMode}"
            CommandParameter="Route"
			/>
        <KeyBinding
			Gesture="CTRL+E"
			Command="{Binding MapElementInputMode}"
            CommandParameter="Region"
			/>
        <KeyBinding
			Gesture="CTRL+S"
			Command="{Binding SaveCampaign_Workaround}"
			/>

    </Window.InputBindings>

    <Window.CommandBindings>

        <!--
        Bind commands to event handlers.
        -->
        <CommandBinding 
            Command="{StaticResource Commands.ZoomOut}" 
            Executed="ZoomOut_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomIn}" 
            Executed="ZoomIn_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.JumpBackToPrevZoom}" 
            Executed="JumpBackToPrevZoom_Executed" 
            CanExecute="JumpBackToPrevZoom_CanExecuted"
            />
        <CommandBinding 
            Command="{StaticResource Commands.Fill}" 
            Executed="Fill_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.OneHundredPercent}" 
            Executed="OneHundredPercent_Executed" 
            />

    </Window.CommandBindings>

    <Window.DataContext>
        <local:MainWindow_ViewModel />
    </Window.DataContext>

    <Grid>
        <StackPanel Panel.ZIndex="2" x:Name="pnlLeftMenu" Orientation="Horizontal"  HorizontalAlignment="Left" Margin="-250,0,0,0">
            <Border Width="250" >
                <local:Left_UC 
                    DeleteLayer="{Binding DeleteLayer}"
                    AddLayer="{Binding AddLayer}"
                    LayerChanged="{Binding VisibilityOfLayerChanged}"
                    Layers="{Binding CampaignVM.Campaign.Layers}"
                    SelectedLayer_Workaround="{Binding SelectedLayer_Workaround}"/>
            </Border>
            <Grid>
                <Button x:Name="btnLeftMenuHide" Style="{DynamicResource IconLeftButton}" Width="48" Height="48" Click="btnLeftMenuHide_Click"  Visibility="Hidden"/>
                <Button x:Name="btnLeftMenuShow" Style="{DynamicResource IconRightButton}" Width="48" Height="48" Click="btnLeftMenuShow_Click" IsEnabled="{Binding IsACampaignOpen}"/>
            </Grid>
        </StackPanel>

        <StackPanel Panel.ZIndex="2" x:Name="pnlTopMenu" Orientation="Vertical" Width="400" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,-100,0,0">
            <Border Height="100" >
                <local:Top_UC 
                    SaveCampaign="{Binding SaveCampaign}"
                    LoadCampaign="{Binding LoadCampaign}"
                    CreateCampaign="{Binding CreateCampaign}"/>
            </Border>
            <Grid>
                <Button x:Name="btnTopMenuHide" Style="{DynamicResource IconUpButton}" Width="48" Height="48" Click="btnTopMenuHide_Click" Visibility="Hidden"/>
                <Button x:Name="btnTopMenuShow" Style="{DynamicResource IconDownButton}" Width="48" Height="48" Click="btnTopMenuShow_Click"/>
            </Grid>
        </StackPanel>

        <StackPanel Panel.ZIndex="2" x:Name="pnlRightMenu" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,0,-320,0">
            <Grid>
                <Button x:Name="btnRightMenuHide" Style="{DynamicResource IconRightButton}" Width="48" Height="48" Click="btnRightMenuHide_Click" Visibility="Hidden"/>
                <Button x:Name="btnRightMenuShow" Style="{DynamicResource IconLeftButton}" Width="48" Height="48" Click="btnRightMenuShow_Click" IsEnabled="{Binding IsACampaignOpen}"/>
            </Grid>
            <Border Width="340" >
                <local:Right_UC
                    EraseMode="{Binding EraseMode}"
                    InputMode="{Binding MapElementInputMode}"
                    LayerChanged="{Binding LayersOfSelectedStrokeChanged}"
                    Layers="{Binding CampaignVM.Campaign.Layers}"
                    LayersForNewElement="{Binding LayersForNewElement}"
                    LayersOfSelectedElement="{Binding LayersOfSelectedElement}"
                    DrawingAttributesForNewStroke="{Binding DrawingAttributesForNewStroke}"
                    DrawingAttributesOfSelectedStroke="{Binding SelectedStroke.DrawingAttributes}"
                    ElementNameForNewElement="{Binding ElementNameForNewElement, Mode=TwoWay}"
                    ElementDetailsForNewElement="{Binding ElementDetailsForNewElement, Mode=TwoWay}"
                    ElementNameOfSelectedElement="{Binding ElementNameForSelectedElement, Mode=TwoWay}"
                    ElementDetailsOfSelectedElement="{Binding ElementDetailsForSelectedElement, Mode=TwoWay}" Margin="20,0,0,0"/>
            </Border>
        </StackPanel>

        <!--Flyoutmenü für Suche ausgeblendet, solange Suche noch nicht implementiert-->
        <StackPanel Panel.ZIndex="2" x:Name="pnlBottomMenu" Orientation="Vertical" Width="400" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,-100">
            <Grid>
                <Button x:Name="btnBottomMenuHide" Style="{DynamicResource IconDownButton}" Width="48" Height="48" Click="btnBottomMenuHide_Click" Visibility="Hidden"/>
                <Button x:Name="btnBottomMenuShow" Style="{DynamicResource IconUpButton}" Width="48" Height="48" Click="btnBottomMenuShow_Click" IsEnabled="{Binding IsACampaignOpen}" Visibility="Hidden" />
            </Grid>
            <Border BorderBrush="#AF1719" BorderThickness="1" Height="100" Background="#4C808080" />
        </StackPanel>

        <StackPanel Panel.ZIndex="2" Orientation="Vertical" Width="350" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,16,18">
            <Border  Height="37" >
                <Grid
                Margin="5,5,5,5"
                >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1" />
                        <!-- empty space -->
                        <ColumnDefinition Width="50" />
                        <!-- the fill button -->
                        <ColumnDefinition Width="5" />
                        <!-- spacer -->
                        <ColumnDefinition Width="50" />
                        <!-- the 100% button -->
                        <ColumnDefinition Width="5" />
                        <!-- spacer -->
                        <ColumnDefinition Width="30" />
                        <!-- the zoom percentage label -->
                        <ColumnDefinition Width="20" />
                        <!-- the % symbol -->
                        <ColumnDefinition Width="5" />
                        <!-- spacer -->
                        <ColumnDefinition Width="20" />
                        <!-- the zoom out button -->
                        <ColumnDefinition Width="5" />
                        <!-- spacer -->
                        <ColumnDefinition Width="120" />
                        <!-- the zoom slider -->
                        <ColumnDefinition Width="5" />
                        <!-- spacer -->
                        <ColumnDefinition Width="20" />
                        <!-- the zoom in button -->
                        <ColumnDefinition Width="27" />
                        <!-- spacer -->
                    </Grid.ColumnDefinitions>
                    <Rectangle Fill="#CC3C3737" Grid.Column="10"   />
                    <Rectangle Fill="#CC3C3737" Grid.Column="5" Grid.ColumnSpan="2"   />
                    <!-- 
                The fill button.  Causes the content to be scaled so that it fits in the viewport.
                -->
                    <Button
                    Grid.Column="1"
                    Command="{StaticResource Commands.Fill}"
                    Content="Fill"
                    />
                    <!-- 
                The 100% button.  Causes the content to be scaled to 100 percent.
                -->
                    <Button
                    Grid.Column="3"
                    Command="{StaticResource Commands.OneHundredPercent}"
                    Content="100%"
                    />

                    <!--
                This is the label that shows what the current zoom level
                is while zooming in and out.
                -->
                    <TextBlock
                    Grid.Column="5"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Right"
                    Text="{Binding ContentScale, Converter={StaticResource scaleToPercentConverter}, ElementName=zoomAndPanControl}" Margin="0,6"
                    />

                    <TextBlock
                    Grid.Column="6"
                    VerticalAlignment="Center"
                    Text="%" Margin="0,6"
                    />

                    <!-- Button to zoom out. -->
                    <Button
                    Grid.Column="8"
                    Command="{StaticResource Commands.ZoomOut}"
                    Content="-"
                    />

                    <!-- Slider to change the current zoom level. -->
                    <Slider
                    Grid.Column="10"
                    Minimum="10" 
                    LargeChange="20" 
                    TickFrequency="10" 
                    Maximum="200" 
                    SmallChange="10" 
                    TickPlacement="TopLeft"
                    Value="{Binding ContentScale, Converter={StaticResource scaleToPercentConverter}, ElementName=zoomAndPanControl}"
                    />

                    <!--
                Button to zoom in.
                -->
                    <Button
                    Grid.Column="12"
                    Command="{StaticResource Commands.ZoomIn}"
                    Content="+"
                    />

                </Grid>
            </Border>
        </StackPanel>


        <DockPanel>
            <!--
	        Wrap the ZoomAndPanControl in a ScrollViewer.
	        When the scaled content that is displayed in ZoomAndPanControl is larger than the viewport onto the content
	        ScrollViewer's scrollbars can be used to manipulate the offset of the viewport.    
            -->
            <ScrollViewer
			    x:Name="scroller"
                CanContentScroll="True"
                VerticalScrollBarVisibility="Visible"
                HorizontalScrollBarVisibility="Visible"
                >

                <!--
                This is the control that handles zooming and panning.
                -->
                <ZoomAndPan:ZoomAndPanControl
                    x:Name="zoomAndPanControl"
                    Background="LightGray"
	                PreviewMouseDown="zoomAndPanControl_MouseDown"
	                MouseUp="zoomAndPanControl_MouseUp"
	                MouseMove="zoomAndPanControl_MouseMove"
	                MouseWheel="zoomAndPanControl_MouseWheel"
                    MouseDoubleClick="zoomAndPanControl_MouseDoubleClick"
                    >

                    <!-- 
				    This is the content that is displayed.
				    -->
                    <Grid
                        x:Name="theGrid"
                        Width="{Binding CampaignVM.Campaign.BackGroundImageWidth}"
                        Height="{Binding CampaignVM.Campaign.BackgroundImageHeight}"
					    >
                        <!--
            		    This Canvas is the main part of the content that is displayed.
					    -->

                        <InkCanvas
						    x:Name="content" IsHitTestVisible="True" 
                            Strokes="{Binding CampaignVM.Strokes}" 
                            DefaultDrawingAttributes="{Binding DrawingAttributesForNewStroke}"
                            EditingMode="{Binding InkCanvasEditingMode}">
                            <InkCanvas.Background>
                                <ImageBrush ImageSource="{Binding CampaignVM.Campaign.BackgroundImagePath}" Stretch="None" />
                            </InkCanvas.Background>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="StrokeCollected">
                                    <i2:CallMethodAction
                                        TargetObject="{Binding}"
                                        MethodName="AddStroke"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="SelectionChanging">
                                    <i2:CallMethodAction
                                        TargetObject="{Binding}"
                                        MethodName="ElementSelected"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="SelectionChanged">
                                    <i2:CallMethodAction
                                        TargetObject="{Binding}"
                                        MethodName="SelectedElementChanged"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="MouseDown">
                                    <i2:CallMethodAction
                                        TargetObject="{Binding}"
                                        MethodName="AddPOI"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="PreviewKeyDown">
                                    <i2:CallMethodAction
                                        TargetObject="{Binding}"
                                        MethodName="DeletePOI"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </InkCanvas>

                        <!--
					    This Canvas and Border are used as a very simple way to render a drag rectangle that the user
					    uses to specify an area to zoom in on.
					    -->
                        <Canvas
						    x:Name="dragZoomCanvas"
						    Visibility="Collapsed"
						    >
                            <Border 
							    x:Name="dragZoomBorder"
							    BorderBrush="Black"
							    BorderThickness="1"
							    Background="Silver"
							    CornerRadius="1"
							    Opacity="0"
							    />
                        </Canvas>
                    </Grid>
                </ZoomAndPan:ZoomAndPanControl>
            </ScrollViewer>
        </DockPanel>
    </Grid>
</Window>
